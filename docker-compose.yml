version: "3.8"
networks:
  backend_network:
    driver: bridge

volumes:
  pg_data:
  kafka_data:

services:
  java-backend:
    build: ./java_backend
    ports:
      - "8081:8081"
    networks:
      - backend_network
    environment:
      # Variáveis para sobrescrever o application.properties quando rodar no Docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092 # Aponta para o listener INTERNO do Kafka
    depends_on:
      - postgres
      - kafka

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend_network
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092" # Porta externa para acesso do host (WSL)
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - backend_network
    environment:
      # --- Configuração de Rede do Kafka ---
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Define dois listeners: um INTERNO (para outros containers) e um EXTERNO (para o host)
      - KAFKA_CFG_LISTENERS=INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093
      # Anuncia os endereços corretos para cada listener
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      # Mapeia os nomes dos listeners para os protocolos de segurança
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      # Define qual listener os brokers devem usar para se comunicar entre si
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    networks:
      - backend_network
    command: >
      bash -c "
      echo 'Waiting for Kafka to be ready...' &&
      sleep 20 &&
      kafka-topics.sh --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 2 --topic first_topic &&
      kafka-topics.sh --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 2 --topic second_topic &&
      echo 'Kafka topics created successfully!'
      "
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - backend_network
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092